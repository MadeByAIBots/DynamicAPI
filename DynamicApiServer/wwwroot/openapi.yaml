openapi: 3.0.1
info:
  title: DynamicAPI Self-Evolving Endpoints
  description: 'DynamicAPI is a self-evolving API service that allows for the dynamic generation of endpoints from JSON files. With the ability to create, list, and execute endpoints, DynamicAPI provides a flexible and efficient solution for expanding API functionality. Leveraging the power of ChatGPT, DynamicAPI aims to streamline the process of endpoint creation, making API development faster and more efficient.'
  version: 1.0.0
servers:
  - url: '{{SERVER_URL}}'
paths:
  /directory-create:
    post:
      description: Creates a new directory within the specified working directory.
      operationId: directoryCreate
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - workingDirectory
                - directoryPath
              type: object
              properties:
                workingDirectory:
                  type: string
                  description: 'The absolute path to the current working directory (e.g., project or repository root).'
                directoryPath:
                  type: string
                  description: The relative path of the new directory to be created.
      responses:
        '200':
          description: Directory created successfully
        '400':
          description: Bad request
  /file-create:
    post:
      description: Creates a new file at a specified path within a specified working directory and writes content to it.
      operationId: fileCreate
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - workingDirectory
                - filePath
                - content
              type: object
              properties:
                workingDirectory:
                  type: string
                  description: The base path where the file will be created.
                filePath:
                  type: string
                  description: 'The path of the file to be created, relative to the working directory.'
                content:
                  type: string
                  description: The content to write to the file.
      responses:
        '200':
          description: File created successfully
        '400':
          description: Bad request
  /ai-bot-send-files:
    post:
      description: 'Sends the contents of multiple files to OpenAI''s Davinci model, along with instructions on what to do with them, and receives a response. NOTE: The model has absolutely no knowledge of anything except what you tell/send it. It cannot access the web or files unless you send them to it.'
      operationId: aiBotSendFiles
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - files
                - message
                - workingDirectory
              type: object
              properties:
                files:
                  type: string
                  description: A semicolon-separated list of file paths to send to the Davinci model. The content of these files will be read and sent as a message to the AI model.
                message:
                  type: string
                  description: 'A detailed instruction for the AI model, such as ''identify problems'', ''summarize'', ''provide suggestions'', etc. The AI model will process the content of the files based on this instruction.'
                workingDirectory:
                  type: string
                  description: The base path where the files are located. All file paths should be relative to this directory.
      responses:
        '200':
          description: Files sent successfully
        '400':
          description: Bad request
  /file-prepend:
    post:
      description: Prepends content to a file located at a specified path within a specified working directory.
      operationId: filePrepend
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - workingDirectory
                - filePath
                - content
                - addNewline
              type: object
              properties:
                workingDirectory:
                  type: string
                  description: The base path where the file is located.
                filePath:
                  type: string
                  description: 'The path of the file to prepend to, relative to the working directory.'
                content:
                  type: string
                  description: The content to prepend.
                addNewline:
                  type: string
                  description: Optional. Whether to add a newline character between the existing content and the new content. Defaults to true.
      responses:
        '200':
          description: Content prepended successfully
        '400':
          description: Bad request
  /directory-search-names:
    post:
      description: Searches for directories within a specified path in the working directory.
      operationId: directorySearchNames
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - workingDirectory
                - searchPath
                - query
              type: object
              properties:
                workingDirectory:
                  type: string
                  description: 'The absolute path to the current working directory (e.g., project or repository root).'
                searchPath:
                  type: string
                  description: The relative path from the working directory where the search should start.
                query:
                  type: string
                  description: The query for the directory names to search for. This can include wildcards for more flexible searching.
      responses:
        '200':
          description: Search completed successfully
        '400':
          description: Bad request
  /file-read-lines:
    post:
      description: Reads the lines of a file located at a specified path within a specified working directory.
      operationId: fileReadLines
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - workingDirectory
                - filePath
              type: object
              properties:
                workingDirectory:
                  type: string
                  description: The base path where the file is located.
                filePath:
                  type: string
                  description: 'The path of the file to be read, relative to the working directory.'
      responses:
        '200':
          description: File read successfully
        '400':
          description: Bad request
  /directory-copy:
    post:
      description: Copies a directory from a specified source path to a specified destination path within the working directory.
      operationId: directoryCopy
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - sourcePath
                - destinationPath
              type: object
              properties:
                sourcePath:
                  type: string
                  description: The source path of the directory to be copied.
                destinationPath:
                  type: string
                  description: The destination path where the directory should be copied to.
      responses:
        '200':
          description: Directory copied successfully
        '400':
          description: Bad request
  /csharp-hello-world:
    get:
      description: 'Executes a simple C# program that prints ''Hello, World!'' to the console.'
      operationId: csharpHelloWorld
      responses:
        '200':
          description: A successful response
        '400':
          description: A bad request response
  /file-line-delete:
    post:
      description: 'Deletes a specified line from a file. The line to be deleted is identified by its line number and hash, which can be obtained using the ''file read lines'' endpoint. This operation is irreversible, so use with caution.'
      operationId: fileLineDelete
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - workingDirectory
                - filePath
                - lineNumber
                - lineHash
              type: object
              properties:
                workingDirectory:
                  type: string
                  description: The absolute path to the directory where the file is located.
                filePath:
                  type: string
                  description: The relative path of the file from which a line will be deleted.
                lineNumber:
                  type: string
                  description: The line number of the line to be deleted. DO NOT GUESS OR ASSUME. This must be obtained from the 'file read lines' endpoint to ensure accuracy.
                lineHash:
                  type: string
                  description: The hash of the line to be deleted for verification. DO NOT GUESS OR ASSUME. This must be obtained from the 'file read lines' endpoint.
      responses:
        '200':
          description: 'Line deleted successfully. The result includes the updated file lines with line numbers and hashes. IMPORTANT: Check this output to ensure it''s correct.'
        '400':
          description: 'Error: The file does not exist or the ''lineNumber'' parameter is out of range.'
  /file-line-insert:
    post:
      description: 'Inserts a new line before a specified line in a file. NOTE: Use the ''file read lines'' endpoint to get the correct line number and hash. DO NOT GUESS OR ASSUME.'
      operationId: fileLineInsert
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - workingDirectory
                - filePath
                - beforeLineNumber
                - beforeLineHash
                - newContent
              type: object
              properties:
                workingDirectory:
                  type: string
                  description: 'The absolute path to the current working directory (e.g., project or repository root).'
                filePath:
                  type: string
                  description: The relative path of the file where a line will be inserted.
                beforeLineNumber:
                  type: string
                  description: The line number before which the new content will be inserted. DO NOT GUESS OR ASSUME. This must be obtained from the 'file read lines' endpoint to ensure accuracy.
                beforeLineHash:
                  type: string
                  description: The hash of the line to insert before for verification. DO NOT GUESS OR ASSUME. This must be obtained from the 'file read lines' endpoint.
                newContent:
                  type: string
                  description: The new content to insert.
      responses:
        '200':
          description: 'Line inserted successfully. The result includes the updated file lines with line numbers and hashes. IMPORTANT: Check this output to ensure it''s correct.'
        '400':
          description: Bad request
  /file-lines-range-replace:
    post:
      description: 'Replaces a range of lines in a file with new content. The range is identified by the start and end line numbers and their hashes, which can be obtained using the ''file read lines'' endpoint. The new content is provided as a string with lines separated by newline characters.'
      operationId: fileLinesRangeReplace
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - workingDirectory
                - filePath
                - startLineNumber
                - endLineNumber
                - startLineHash
                - endLineHash
                - newContents
              type: object
              properties:
                workingDirectory:
                  type: string
                  description: The absolute path to the directory where the file is located.
                filePath:
                  type: string
                  description: The relative path of the file in which a line will be replaced.
                startLineNumber:
                  type: string
                  description: The line number of the start line to be replaced. DO NOT GUESS OR ASSUME. This must be obtained from the 'file read lines' endpoint to ensure accuracy.
                endLineNumber:
                  type: string
                  description: The line number of the end line to be replaced. DO NOT GUESS OR ASSUME. This must be obtained from the 'file read lines' endpoint to ensure accuracy.
                startLineHash:
                  type: string
                  description: The hash of the start line to be replaced for verification. DO NOT GUESS OR ASSUME. This must be obtained from the 'file read lines' endpoint.
                endLineHash:
                  type: string
                  description: The hash of the end line to be replaced for verification. DO NOT GUESS OR ASSUME. This must be obtained from the 'file read lines' endpoint.
                newContents:
                  type: string
                  description: The new content to replace the old content with.
      responses:
        '200':
          description: The operation was successful. The response body contains the new content of the file.
        '400':
          description: The operation failed due to a bad request. The response body contains an error message explaining the reason for the failure.
  /run-bash-command:
    post:
      operationId: runBashCommand
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - command
                - workingDirectory
              type: object
              properties:
                command:
                  type: string
                  description: The bash command to execute.
                workingDirectory:
                  type: string
                  description: The base working directory to execute the command in.
                maxLines:
                  type: string
                  description: 'The maximum number of output lines, defaulting to 10.'
      responses:
        '200':
          description: A successful response
        '400':
          description: A bad request response
  /file-copy:
    post:
      description: Copies a file from a specified source path to a specified destination path within the working directory.
      operationId: fileCopy
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - sourcePath
                - destinationPath
              type: object
              properties:
                sourcePath:
                  type: string
                  description: The source file path.
                destinationPath:
                  type: string
                  description: The destination file path.
      responses:
        '200':
          description: File copied successfully
        '400':
          description: Bad request
  /ai-bot-message:
    post:
      description: 'Sends a message to OpenAI''s Davinci model and receives a response. NOTE: The model has absolutely no knowledge of anything except what you tell it. It cannot access the web or files unless you send them to it.'
      operationId: aiBotMessage
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - message
              type: object
              properties:
                message:
                  type: string
                  description: The message to send to the Davinci model.
      responses:
        '200':
          description: Message sent successfully
        '400':
          description: Bad request
  /file-search-content:
    post:
      description: 'Searches for files in a specified directory with the content matching a specified query. NOTE: This does not search file names.'
      operationId: fileSearchContent
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - workingDirectory
                - query
                - recursive
              type: object
              properties:
                workingDirectory:
                  type: string
                  description: The base path where the search should start.
                query:
                  type: string
                  description: The search query. Use * wildcards the same way you would use in grep.
                recursive:
                  type: string
                  description: Whether to search within subdirectories.
      responses:
        '200':
          description: Search completed successfully
        '400':
          description: Bad request
  /file-read-multiple:
    post:
      operationId: fileReadMultiple
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - workingDirectory
                - filePaths
              type: object
              properties:
                workingDirectory:
                  type: string
                  description: The base path where the files are located.
                filePaths:
                  type: string
                  description: The semicolon-separated list of file paths to read.
      responses:
        '200':
          description: The combined content of the files.
  /ai-bot-send-file-paths:
    post:
      description: 'Lists all files in a directory and sends their paths to the bot along with a message. NOTE: The model has absolutely no knowledge of anything except what you tell it. It cannot access the web or files unless you send them to it.'
      operationId: aiBotSendFilePaths
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - workingDirectory
                - subDirectory
                - message
                - recursive
              type: object
              properties:
                workingDirectory:
                  type: string
                  description: The working directory (eg. project or repository)
                subDirectory:
                  type: string
                  description: The directory to list files from. This must be relative to the working directory.
                message:
                  type: string
                  description: 'The message to send to the bot, such as asking it for identify which file to use for a task.'
                recursive:
                  type: string
                  description: Whether to search directories recursively.
      responses:
        '200':
          description: Files listed and sent successfully
        '400':
          description: Bad request
  /file-append:
    post:
      description: Appends specified content to a file.
      operationId: fileAppend
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - workingDirectory
                - filePath
                - content
                - addNewline
              type: object
              properties:
                workingDirectory:
                  type: string
                  description: 'The absolute path to the current working directory (e.g., project or repository root).'
                filePath:
                  type: string
                  description: The relative path of the file to append to.
                content:
                  type: string
                  description: The content to append to the file.
                addNewline:
                  type: string
                  description: Optional. Whether to add a newline character after the appended content. Defaults to true.
      responses:
        '200':
          description: Content appended successfully
        '400':
          description: Bad request
  /file-update:
    post:
      description: Updates the content of a file located at a specified path within a specified working directory.
      operationId: fileUpdate
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - workingDirectory
                - filePath
                - content
              type: object
              properties:
                workingDirectory:
                  type: string
                  description: The base path where the file is located.
                filePath:
                  type: string
                  description: 'The path of the file to be updated, relative to the working directory.'
                content:
                  type: string
                  description: The content to update the file with.
      responses:
        '200':
          description: File updated successfully
        '400':
          description: Bad request
  /file-search-replace:
    post:
      description: Searches for a specified string in a file and replaces it with a new string. Use with caution.
      operationId: fileSearchReplace
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - workingDirectory
                - filePath
                - searchQuery
                - replacementString
              type: object
              properties:
                workingDirectory:
                  type: string
                  description: The absolute path to the current working directory.
                filePath:
                  type: string
                  description: The relative path of the file in which we'll search and replace.
                searchQuery:
                  type: string
                  description: The string we're looking for in the file.
                replacementString:
                  type: string
                  description: The string that will replace the searchQuery in the file.
      responses:
        '200':
          description: Search and replace operation completed successfully
        '400':
          description: Bad request
  /endpoint-list:
    get:
      operationId: endpointList
      responses:
        '200':
          description: A successful response
        '400':
          description: A bad request response
  /file-read:
    post:
      operationId: fileRead
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - workingDirectory
                - filePath
              type: object
              properties:
                workingDirectory:
                  type: string
                  description: The base path where the file is located.
                filePath:
                  type: string
                  description: 'The path of the file to be read, relative to the working directory.'
      responses:
        '200':
          description: File read successfully
        '400':
          description: Bad request
  /file-line-replace:
    post:
      description: 'Replaces a specified line in a file with new content. The line to be replaced is identified by its line number and hash, which can be obtained using the ''file read lines'' endpoint. This operation is irreversible, so use with caution.'
      operationId: fileLineReplace
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - workingDirectory
                - filePath
                - lineNumber
                - lineHash
                - newContent
              type: object
              properties:
                workingDirectory:
                  type: string
                  description: The absolute path to the directory where the file is located.
                filePath:
                  type: string
                  description: The relative path of the file in which a line will be replaced.
                lineNumber:
                  type: string
                  description: The line number of the line to be replaced. DO NOT GUESS OR ASSUME. This must be obtained from the 'file read lines' endpoint to ensure accuracy.
                lineHash:
                  type: string
                  description: The hash of the line to be replaced for verification. DO NOT GUESS OR ASSUME. This must be obtained from the 'file read lines' endpoint.
                newContent:
                  type: string
                  description: The new content to replace the old content with.
      responses:
        '200':
          description: Line replaced successfully
        '400':
          description: Bad request
  /file-move:
    post:
      description: Moves a file from a specified source path to a specified destination path within the working directory.
      operationId: fileMove
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - sourcePath
                - destinationPath
              type: object
              properties:
                sourcePath:
                  type: string
                  description: The source file path.
                destinationPath:
                  type: string
                  description: The destination file path.
      responses:
        '200':
          description: File moved successfully
        '400':
          description: Bad request
  /run-python-snippet:
    post:
      description: 'Executes the provided python snippet. NOTES: 1) This is NOT to be used for executing python script files. 2) State such as variables are not preserved after snippet execution. You must include everything in the snippet that is required for execution, and execute it all at once.'
      operationId: runPythonSnippet
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - pythonSnippet
                - workingDirectory
              type: object
              properties:
                pythonSnippet:
                  type: string
                  description: The Python code snippet to execute.
                workingDirectory:
                  type: string
                  description: The base working directory to execute the command in.
      responses:
        '200':
          description: A successful response
        '400':
          description: A bad request response
  /directory-move:
    post:
      description: Moves a directory from a specified source path to a specified destination path within the working directory.
      operationId: directoryMove
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - sourcePath
                - destinationPath
              type: object
              properties:
                sourcePath:
                  type: string
                  description: The absolute path of the directory to be moved.
                destinationPath:
                  type: string
                  description: The absolute path where the directory should be moved to.
      responses:
        '200':
          description: Directory moved successfully
        '400':
          description: Bad request
  /ai-bot-chat:
    post:
      description: Chat with an AI bot via OpenAI's API. The chat history will be preserved so it will remember previous messages.
      operationId: aiBotChat
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - message
              type: object
              properties:
                message:
                  type: string
                  description: 'A very detailed, comprehensive message to the bot. NOTE: It does not know anything about the current workspace, or working directory, so you need to provide it with any information it needs.'
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad request
  /directory-list:
    post:
      description: Lists the contents of a specified directory within the working directory.
      operationId: directoryList
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - workingDirectory
              type: object
              properties:
                workingDirectory:
                  type: string
                  description: 'The absolute path to the current working directory (e.g., project or repository root).'
                directoryPath:
                  type: string
                  description: 'OPTIONAL: The relative path of the directory to be listed within the working directory.'
                recursive:
                  type: string
                  description: Whether to list directories recursively.
      responses:
        '200':
          description: Directory listed successfully
        '400':
          description: Bad request
  /ai-bot-files-content-analysis:
    post:
      description: 'Ask OpenAI''s Davinci model questions about files in the working directory. This will perform a smart multi step analysis to identify the relevant files, and send them to another bot for analysis, to generate a response to your message.'
      operationId: aiBotFilesContentAnalysis
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - message
                - workingDirectory
              type: object
              properties:
                message:
                  type: string
                  description: 'A detailed instruction or question for the AI model, such as ''which file is responsible for...?'', ''identify problems'', ''summarize'', ''provide suggestions'', etc. The AI model will process the content of the files based on this instruction.'
                workingDirectory:
                  type: string
                  description: The base path where the files are located. All file paths should be relative to this directory.
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad request
  /file-search-names:
    post:
      description: 'Searches for a provided string in file names, and returns the files that match. NOTE: This does not search file content.'
      operationId: fileSearchNames
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              required:
                - workingDirectory
                - fileName
              type: object
              properties:
                workingDirectory:
                  type: string
                  description: The base path where the search should start.
                fileName:
                  type: string
                  description: The name of the file to search for. Use * wildcards the same way you would with 'find' bash command.
      responses:
        '200':
          description: Search completed successfully
        '400':
          description: Bad request